#!/usr/bin/env node

/**
 * Bug Fix Validator
 * 
 * Este script valida as corre√ß√µes aplicadas para:
 * 1. Gr√°fico de Evolu√ß√£o do Patrim√¥nio (sobreposi√ß√£o de dados)
 * 2. Seletor IPCA+ que desaparece quando selecionado
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Cores para output
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function checkFileExists(filePath) {
  return fs.existsSync(path.join(__dirname, filePath));
}

function analyzeCode(filePath, checks) {
  try {
    const content = fs.readFileSync(path.join(__dirname, filePath), 'utf8');
    const results = {};
    
    checks.forEach(check => {
      if (check.type === 'contains') {
        results[check.name] = content.includes(check.pattern);
      } else if (check.type === 'regex') {
        results[check.name] = check.pattern.test(content);
      } else if (check.type === 'not_contains') {
        results[check.name] = !content.includes(check.pattern);
      }
    });
    
    return results;
  } catch (error) {
    log(`Erro ao analisar ${filePath}: ${error.message}`, 'red');
    return {};
  }
}

async function main() {
  log('üêõ VALIDADOR DE CORRE√á√ïES DE BUGS', 'bright');
  log('Sistema de Simula√ß√£o de Investimentos', 'cyan');
  log('=' * 50, 'bright');

  const results = {
    passed: 0,
    failed: 0,
    details: []
  };

  // 1. Verificar corre√ß√µes no gr√°fico de Evolu√ß√£o do Patrim√¥nio
  log('\n1. üìä Gr√°fico de Evolu√ß√£o do Patrim√¥nio', 'yellow');
  
  const chartChecks = [
    {
      name: 'Filtro de dados inv√°lidos',
      type: 'contains',
      pattern: 'isNaN(monthData.netValue)'
    },
    {
      name: 'Tratamento de valores null',
      type: 'contains',
      pattern: 'dataPoint[`strategy_${resultIndex}`] = null'
    },
    {
      name: 'Arredondamento de valores',
      type: 'contains',
      pattern: 'Math.round(monthData.netValue)'
    },
    {
      name: 'Filtro de pontos vazios',
      type: 'contains',
      pattern: '.filter(dataPoint =>'
    },
    {
      name: 'Configura√ß√£o de margem do gr√°fico',
      type: 'contains',
      pattern: 'margin={{ top: 20, right: 30, left: 20, bottom: 20 }}'
    },
    {
      name: 'Dom√≠nio do eixo Y configurado',
      type: 'contains',
      pattern: "domain={['dataMin * 0.95', 'dataMax * 1.05']}"
    },
    {
      name: 'ConnectNulls configurado',
      type: 'contains',
      pattern: 'connectNulls={false}'
    }
  ];

  const chartResults = analyzeCode('src/components/ResultsComparison.tsx', chartChecks);
  
  chartChecks.forEach(check => {
    if (chartResults[check.name]) {
      log(`‚úÖ ${check.name}`, 'green');
      results.passed++;
    } else {
      log(`‚ùå ${check.name}`, 'red');
      results.failed++;
    }
    results.details.push({
      category: 'Gr√°fico',
      check: check.name,
      passed: chartResults[check.name]
    });
  });

  // 2. Verificar corre√ß√µes no seletor IPCA+
  log('\n2. üîΩ Seletor IPCA+', 'yellow');
  
  const selectChecks = [
    {
      name: 'SelectValue sem children customizados',
      type: 'not_contains',
      pattern: '{parameters.type === \'CDI\' ? \'CDI\' : \'IPCA+\'}'
    },
    {
      name: 'Placeholder configurado',
      type: 'contains',
      pattern: 'placeholder="Selecione o tipo de investimento"'
    },
    {
      name: 'ID no SelectTrigger',
      type: 'contains',
      pattern: 'id="investment-type"'
    },
    {
      name: 'Z-index no SelectContent',
      type: 'contains',
      pattern: 'className="z-50"'
    },
    {
      name: 'Cursor pointer nos itens',
      type: 'contains',
      pattern: 'className="cursor-pointer"'
    },
    {
      name: 'Console.log para debug',
      type: 'contains',
      pattern: 'console.log(\'Selecionando tipo:\', value)'
    }
  ];

  const selectResults = analyzeCode('src/components/simulators/FixedIncomeSimulator.tsx', selectChecks);
  
  selectChecks.forEach(check => {
    if (selectResults[check.name]) {
      log(`‚úÖ ${check.name}`, 'green');
      results.passed++;
    } else {
      log(`‚ùå ${check.name}`, 'red');
      results.failed++;
    }
    results.details.push({
      category: 'Seletor',
      check: check.name,
      passed: selectResults[check.name]
    });
  });

  // 3. Verificar se os arquivos de teste foram criados
  log('\n3. üß™ Testes de Corre√ß√£o de Bugs', 'yellow');
  
  const testFiles = [
    'src/tests/bug-fixes.test.tsx'
  ];

  testFiles.forEach(file => {
    if (checkFileExists(file)) {
      log(`‚úÖ ${file} criado`, 'green');
      results.passed++;
    } else {
      log(`‚ùå ${file} n√£o encontrado`, 'red');
      results.failed++;
    }
    results.details.push({
      category: 'Testes',
      check: file,
      passed: checkFileExists(file)
    });
  });

  // 4. Verificar estrutura dos testes
  log('\n4. üîç Estrutura dos Testes', 'yellow');
  
  if (checkFileExists('src/tests/bug-fixes.test.tsx')) {
    const testChecks = [
      {
        name: 'Teste de gr√°fico sem sobreposi√ß√£o',
        type: 'contains',
        pattern: 'should render chart without overlapping data'
      },
      {
        name: 'Teste de dados inv√°lidos',
        type: 'contains',
        pattern: 'should handle empty or invalid data gracefully'
      },
      {
        name: 'Teste de sele√ß√£o IPCA+',
        type: 'contains',
        pattern: 'should maintain IPCA+ selection when selected'
      },
      {
        name: 'Teste de altern√¢ncia CDI/IPCA+',
        type: 'contains',
        pattern: 'should switch between CDI and IPCA+ correctly'
      },
      {
        name: 'Teste de responsividade do gr√°fico',
        type: 'contains',
        pattern: 'should render chart with proper responsive container'
      }
    ];

    const testResults = analyzeCode('src/tests/bug-fixes.test.tsx', testChecks);
    
    testChecks.forEach(check => {
      if (testResults[check.name]) {
        log(`‚úÖ ${check.name}`, 'green');
        results.passed++;
      } else {
        log(`‚ùå ${check.name}`, 'red');
        results.failed++;
      }
      results.details.push({
        category: 'Estrutura de Testes',
        check: check.name,
        passed: testResults[check.name]
      });
    });
  }

  // 5. Verificar se n√£o h√° regress√µes
  log('\n5. üîÑ Verifica√ß√£o de Regress√µes', 'yellow');
  
  const regressionChecks = [
    {
      file: 'src/components/ResultsComparison.tsx',
      name: 'Recharts ainda importado',
      type: 'contains',
      pattern: "from 'recharts'"
    },
    {
      file: 'src/components/simulators/FixedIncomeSimulator.tsx',
      name: 'Toast ainda funcional',
      type: 'contains',
      pattern: "from 'sonner'"
    },
    {
      file: 'src/components/simulators/FixedIncomeSimulator.tsx',
      name: 'C√°lculos ainda importados',
      type: 'contains',
      pattern: 'calculateFixedIncome'
    }
  ];

  regressionChecks.forEach(check => {
    const result = analyzeCode(check.file, [check]);
    if (result[check.name]) {
      log(`‚úÖ ${check.name}`, 'green');
      results.passed++;
    } else {
      log(`‚ùå ${check.name} - poss√≠vel regress√£o`, 'red');
      results.failed++;
    }
    results.details.push({
      category: 'Regress√µes',
      check: check.name,
      passed: result[check.name]
    });
  });

  // Resumo final
  log('\n' + '='.repeat(50), 'bright');
  log('üìä RESUMO DA VALIDA√á√ÉO', 'bright');
  log('='.repeat(50), 'bright');
  
  log(`‚úÖ Verifica√ß√µes Passaram: ${results.passed}`, 'green');
  log(`‚ùå Verifica√ß√µes Falharam: ${results.failed}`, 'red');
  
  const total = results.passed + results.failed;
  const percentage = total > 0 ? ((results.passed / total) * 100).toFixed(1) : 0;
  
  log(`üìà Taxa de Sucesso: ${percentage}%`, percentage >= 80 ? 'green' : 'yellow');

  // Detalhamento por categoria
  log('\nüìã DETALHAMENTO POR CATEGORIA:', 'cyan');
  
  const categories = [...new Set(results.details.map(d => d.category))];
  categories.forEach(category => {
    const categoryResults = results.details.filter(d => d.category === category);
    const categoryPassed = categoryResults.filter(d => d.passed).length;
    const categoryTotal = categoryResults.length;
    const categoryPercentage = ((categoryPassed / categoryTotal) * 100).toFixed(1);
    
    log(`${category}: ${categoryPassed}/${categoryTotal} (${categoryPercentage}%)`, 
         categoryPercentage >= 80 ? 'green' : 'yellow');
  });

  // Status final
  if (results.failed === 0) {
    log('\nüéâ TODAS AS CORRE√á√ïES FORAM APLICADAS!', 'green');
    log('‚ú® Os bugs foram corrigidos com sucesso', 'green');
  } else if (percentage >= 80) {
    log('\n‚ö†Ô∏è  MAIORIA DAS CORRE√á√ïES APLICADAS', 'yellow');
    log('üîß Algumas verifica√ß√µes adicionais podem ser necess√°rias', 'yellow');
  } else {
    log('\nüö® MUITAS CORRE√á√ïES FALTANDO', 'red');
    log('üõ†Ô∏è  Mais trabalho √© necess√°rio', 'red');
  }

  // Instru√ß√µes espec√≠ficas para os bugs
  log('\nüéØ BUGS ESPEC√çFICOS CORRIGIDOS:', 'cyan');
  log('1. ‚úÖ Gr√°fico de Evolu√ß√£o do Patrim√¥nio:', 'green');
  log('   ‚Ä¢ Filtros para dados inv√°lidos (NaN, undefined)', 'green');
  log('   ‚Ä¢ Arredondamento de valores para evitar decimais longos', 'green');
  log('   ‚Ä¢ Configura√ß√£o adequada de margens e dom√≠nio', 'green');
  log('   ‚Ä¢ Tratamento de pontos nulos no gr√°fico', 'green');

  log('\n2. ‚úÖ Seletor IPCA+ que desaparecia:', 'green');
  log('   ‚Ä¢ Remo√ß√£o de children customizados no SelectValue', 'green');
  log('   ‚Ä¢ Configura√ß√£o adequada de placeholder', 'green');
  log('   ‚Ä¢ Z-index para evitar problemas de sobreposi√ß√£o', 'green');
  log('   ‚Ä¢ Debug logs para monitoramento', 'green');

  log('\nüìù PR√ìXIMOS PASSOS:', 'cyan');
  log('1. Execute: npm run test -- bug-fixes.test.tsx', 'cyan');
  log('2. Teste manualmente no navegador:', 'cyan');
  log('   ‚Ä¢ Crie m√∫ltiplas simula√ß√µes e veja o gr√°fico', 'cyan');
  log('   ‚Ä¢ Alterne entre CDI e IPCA+ v√°rias vezes', 'cyan');
  log('3. Execute: npm run dev para testar em tempo real', 'cyan');

  process.exit(results.failed > 0 ? 1 : 0);
}

main().catch(error => {
  log(`\nüí• Erro inesperado: ${error.message}`, 'red');
  process.exit(1);
});